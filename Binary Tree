#include <iostream>
#include <cassert>
#include <vector>
#include <cmath>
#include<queue>
using namespace std;

struct TreeNode {
	int val { };
	TreeNode* left { };
	TreeNode* right { };
	TreeNode(int val) : val(val) { }
};


struct BinaryTree {
	TreeNode* root { };
	BinaryTree(int root_value) :
			root(new TreeNode(root_value)) {
	}

	void add(vector<int> values, vector<char> direction) {
		assert(values.size() == direction.size());
		TreeNode* current = this->root;
		// iterate on the path, create all necessary TreeNodes
		for (int i = 0; i < (int) values.size(); ++i) {
			if (direction[i] == 'L') {
				if (!current->left)
					current->left = new TreeNode(values[i]);
				else
					assert(current->left->val == values[i]);
				current = current->left;
			} else {
				if (!current->right)
					current->right = new TreeNode(values[i]);
				else
					assert(current->right->val == values[i]);
				current = current->right;
			}
		}
	}

	void _print_inorder(TreeNode* current) {
		if (!current)
			return;
		_print_inorder(current->left);
		cout << current->val << " ";
		_print_inorder(current->right);
	}


	void print_inorder() {
		_print_inorder(root);
		cout << "\n";
	}
	int max=0;
	void _get_max(TreeNode* current) {
		if (!current)
			return;
		_get_max(current->left);
		if(current->val >max)
			max=current->val;
		_get_max(current->right);
	}
	int get_max()
	{
		_get_max(root);
		return max;
		
	}
	int _get_hight(TreeNode* current)
	{
		int idx=0;
		for(TreeNode*cur=current;cur;cur=cur->left)
		{
			idx++;
		}
		int idx2=0;
		for(TreeNode*cur=current;cur;cur=cur->left)
		{
			idx2++;
		}
		return idx>idx2?idx:idx2;
	}
	int numbers=0;
	void _g_max(TreeNode* current) {
		if (!current)
			return;
		_g_max(current->left);
		numbers++;
		_g_max(current->right);
		numbers++;
	}
	int numberofnodes()
	{
		return numbers+1;
	}
	int get_hight()
	{
		return _get_hight(root)-1;
	}
	
	bool perfect_(TreeNode*current)
	{
		return numberofnodes()==pow(2,get_hight()+1)-1;
	}
	bool perfect()
	{
		return perfect_(root);
	}
	void traverselevel(TreeNode* cur) {
		
    if (!cur) return; // Handle the case where the tree is empty.

    queue<TreeNode*> tree;
    tree.push(cur);

    while (!tree.empty()) {
        TreeNode* last = tree.front();
        tree.pop();

        cout << last->val << " ";

        if (last->left)
            tree.push(last->left);
        if (last->right)
            tree.push(last->right);
    }
}
	void traverse()
	{
		traverselevel();
	}
};

int main() {
	BinaryTree tree(1);
	tree.add( { 2, 4, 7 }, { 'L', 'L', 'L' });
	tree.add( { 2, 4, 8 }, { 'L', 'L', 'R' });
	tree.add( { 2, 5, 9 }, { 'L', 'R', 'R' });
	tree.add( { 3, 6, 10 }, { 'R', 'R', 'L' });

	tree.print_inorder();
	// 7 4 8 2 5 9 1 3 10 6
	cout<<tree.get_max();
	cout<<tree.get_hight();
	cout<<"\n\n"<<tree.perfect()<<endl;
	tree.traverse();
	return 0;
}

